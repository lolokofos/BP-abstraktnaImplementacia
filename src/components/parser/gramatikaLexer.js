// Generated from gramatika.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,25,145,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,1,1,1,1,1,
2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,
12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,
1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,5,20,120,
8,20,10,20,12,20,123,9,20,1,21,1,21,1,21,5,21,128,8,21,10,21,12,21,131,9,
21,3,21,133,8,21,1,22,1,22,1,23,1,23,1,24,4,24,140,8,24,11,24,12,24,141,
1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
24,49,25,1,0,5,2,0,65,90,97,122,3,0,65,90,95,95,97,122,1,0,49,57,1,0,48,
57,3,0,9,10,13,13,32,32,148,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,
53,1,0,0,0,5,56,1,0,0,0,7,59,1,0,0,0,9,64,1,0,0,0,11,69,1,0,0,0,13,75,1,
0,0,0,15,78,1,0,0,0,17,80,1,0,0,0,19,82,1,0,0,0,21,87,1,0,0,0,23,89,1,0,
0,0,25,91,1,0,0,0,27,95,1,0,0,0,29,97,1,0,0,0,31,99,1,0,0,0,33,102,1,0,0,
0,35,104,1,0,0,0,37,109,1,0,0,0,39,115,1,0,0,0,41,117,1,0,0,0,43,132,1,0,
0,0,45,134,1,0,0,0,47,136,1,0,0,0,49,139,1,0,0,0,51,52,5,59,0,0,52,2,1,0,
0,0,53,54,5,58,0,0,54,55,5,61,0,0,55,4,1,0,0,0,56,57,5,105,0,0,57,58,5,102,
0,0,58,6,1,0,0,0,59,60,5,116,0,0,60,61,5,104,0,0,61,62,5,101,0,0,62,63,5,
110,0,0,63,8,1,0,0,0,64,65,5,101,0,0,65,66,5,108,0,0,66,67,5,115,0,0,67,
68,5,101,0,0,68,10,1,0,0,0,69,70,5,119,0,0,70,71,5,104,0,0,71,72,5,105,0,
0,72,73,5,108,0,0,73,74,5,101,0,0,74,12,1,0,0,0,75,76,5,100,0,0,76,77,5,
111,0,0,77,14,1,0,0,0,78,79,5,40,0,0,79,16,1,0,0,0,80,81,5,41,0,0,81,18,
1,0,0,0,82,83,5,115,0,0,83,84,5,107,0,0,84,85,5,105,0,0,85,86,5,112,0,0,
86,20,1,0,0,0,87,88,5,42,0,0,88,22,1,0,0,0,89,90,5,43,0,0,90,24,1,0,0,0,
91,92,5,97,0,0,92,93,5,110,0,0,93,94,5,100,0,0,94,26,1,0,0,0,95,96,5,8743,
0,0,96,28,1,0,0,0,97,98,5,61,0,0,98,30,1,0,0,0,99,100,5,60,0,0,100,101,5,
61,0,0,101,32,1,0,0,0,102,103,5,8804,0,0,103,34,1,0,0,0,104,105,5,116,0,
0,105,106,5,114,0,0,106,107,5,117,0,0,107,108,5,101,0,0,108,36,1,0,0,0,109,
110,5,102,0,0,110,111,5,97,0,0,111,112,5,108,0,0,112,113,5,115,0,0,113,114,
5,101,0,0,114,38,1,0,0,0,115,116,5,33,0,0,116,40,1,0,0,0,117,121,7,0,0,0,
118,120,7,1,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,
1,0,0,0,122,42,1,0,0,0,123,121,1,0,0,0,124,133,5,48,0,0,125,129,7,2,0,0,
126,128,7,3,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,
1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,132,124,1,0,0,0,132,125,1,0,0,0,
133,44,1,0,0,0,134,135,5,45,0,0,135,46,1,0,0,0,136,137,5,172,0,0,137,48,
1,0,0,0,138,140,7,4,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,
141,142,1,0,0,0,142,143,1,0,0,0,143,144,6,24,0,0,144,50,1,0,0,0,5,0,121,
129,132,141,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class gramatikaLexer extends antlr4.Lexer {

    static grammarFileName = "gramatika.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "':='", "'if'", "'then'", "'else'", 
                         "'while'", "'do'", "'('", "')'", "'skip'", "'*'", 
                         "'+'", "'and'", "'\\u2227'", "'='", "'<='", "'\\u2264'", 
                         "'true'", "'false'", "'!'", null, null, "'-'", 
                         "'\\u00AC'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, "ID", "NUMBER", 
                          "MINUS", "NEG", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "ID", "NUMBER", "MINUS", "NEG", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

gramatikaLexer.EOF = antlr4.Token.EOF;
gramatikaLexer.T__0 = 1;
gramatikaLexer.T__1 = 2;
gramatikaLexer.T__2 = 3;
gramatikaLexer.T__3 = 4;
gramatikaLexer.T__4 = 5;
gramatikaLexer.T__5 = 6;
gramatikaLexer.T__6 = 7;
gramatikaLexer.T__7 = 8;
gramatikaLexer.T__8 = 9;
gramatikaLexer.T__9 = 10;
gramatikaLexer.T__10 = 11;
gramatikaLexer.T__11 = 12;
gramatikaLexer.T__12 = 13;
gramatikaLexer.T__13 = 14;
gramatikaLexer.T__14 = 15;
gramatikaLexer.T__15 = 16;
gramatikaLexer.T__16 = 17;
gramatikaLexer.T__17 = 18;
gramatikaLexer.T__18 = 19;
gramatikaLexer.T__19 = 20;
gramatikaLexer.ID = 21;
gramatikaLexer.NUMBER = 22;
gramatikaLexer.MINUS = 23;
gramatikaLexer.NEG = 24;
gramatikaLexer.WS = 25;



